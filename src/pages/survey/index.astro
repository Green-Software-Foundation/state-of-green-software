---
import Layout from "../../layouts/Layout.astro";
---

<Layout>
  <div class="max-w-5xl  mx-auto">
    <div id="wrapper" class="prose max-w-6xl mx-auto"></div>
  </div>
</Layout>
<style is:global>
  .chart-card {
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
    padding: 2rem;
    gap: 1rem;
    background: #ffffff;
    box-shadow: 0px 0px 1px rgba(12, 26, 75, 0.24),
      0px 3px 8px -1px rgba(50, 50, 71, 0.05);
    border-radius: 8px;
    color: initial;
  }
  @media (max-width: 400px) {
    .chart-card {
      padding: 0.5rem;
    }
  }
</style>
<script>
  import surveryResults from "../../survey-results.json";
  import Chart from "chart.js/auto";
  // Get the wrapper element and add new div for each survey result and use result.data to populate the chart with chartjs
  const wrapper = document.getElementById("wrapper") as HTMLCanvasElement;
  surveryResults.forEach((result) => {
    const div = document.createElement("div");
    div.classList.add("chart-card");
    // Add H1 with the question
    const h1 = document.createElement("h1");
    h1.innerText = result.question;
    h1.classList.add("text-lg", "font-bold");
    div.appendChild(h1);

    const canvas = document.createElement("canvas");
    canvas.classList.add("chart");
    div.appendChild(canvas);
    wrapper.appendChild(div);
    const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
    new Chart(ctx, {
      type: "bar",
      data: {
        labels: result.data.map((row) => row.answer_choices),
        datasets: [
          {
            data: result.data.map((row) => row.response_percent),
            backgroundColor: ["#aecc53", "#006d68", "#1e1e1e"],
            maxBarThickness: 30,
          },
        ],
      },
      options: {
        indexAxis: "y",
        responsive: true,
        aspectRatio: 2 / 1,
        maintainAspectRatio: true,
        plugins: {
          legend: {
            display: false,
          },
          tooltip: {
            callbacks: {
              label: function (context) {
                var label = context.dataset.label || "";
                if (label) {
                  label += ": ";
                }
                if (context.parsed.y !== null) {
                  label += new Intl.NumberFormat("en-US", {
                    style: "percent",
                  }).format(context.parsed.x / 100);
                }
                return label;
              },
            },
          },
        },
        scales: {
          y: {
            ticks: {
              callback: function (value) {
                if (typeof value === "string") {
                  return value;
                }
                let label = this.getLabelForValue(value);
                if (label.length > 30) {
                  return label.substring(0, 30) + "...";
                }

                return label;
              },
            },
          },
          x: {
            ticks: {
              callback: function (value, index, values) {
                return value + "%";
              },
            },
          },
        },
      },
    });
  });

  // Add one more graph with the following Q23data
  const Q23data = {
    question:
      "How would you rank the following in order of importance? You can drag and drop the options to order them with the top one being the most important (1 = the most important).",
    answered: 1718,
    skipped: 473,
    data: [
      {
        answer_choices: "Security",
        responses: 928,
        response_percent: 54.24,
        score: 4.18,
      },
      {
        answer_choices: "Reliability",
        responses: 244,
        response_percent: 14.27,
        score: 3.36,
      },
      {
        answer_choices: "Sustainability",
        responses: 284,
        response_percent: 16.56,
        score: 2.84,
      },
      {
        answer_choices: "Performance",
        responses: 137,
        response_percent: 8.0,
        score: 2.65,
      },
      {
        answer_choices: "Cost",
        responses: 125,
        response_percent: 7.3,
        score: 1.98,
      },
    ],
  };
  const div = document.createElement("div");
  div.classList.add("chart-card");
  // Add H1 with the question
  const h1 = document.createElement("h1");
  h1.innerText = Q23data.question;
  h1.classList.add("text-xl", "font-bold");
  div.appendChild(h1);

  const canvas = document.createElement("canvas");
  canvas.classList.add("chart");
  div.appendChild(canvas);
  wrapper.appendChild(div);
  const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
  new Chart(ctx, {
    type: "bar",
    data: {
      labels: Q23data.data.map((row) => row.answer_choices),
      datasets: [
        {
          data: Q23data.data.map((row) => row.score),
          backgroundColor: ["#aecc53", "#006d68", "#1e1e1e"],
          maxBarThickness: 30,
        },
      ],
    },
    options: {
      indexAxis: "y",
      responsive: true,
      aspectRatio: 3 / 2,
      maintainAspectRatio: true,
      plugins: {
        legend: {
          display: false,
        },
      },
      scales: {
        y: {
          beginAtZero: true,
        },
      },
    },
  });
</script>
